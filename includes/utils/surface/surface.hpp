/// @file –Ø –æ–ø–∏—à—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤ –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ, –Ω–æ –∫–ª–∞—Å—Å—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
/// –±—É–¥–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ —Ä–∞–∑–Ω—ã–º —Ñ–∞–π–ª–∞–º, –∞ —Ç–∞–∫–∂–µ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏
/// –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –≤ –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã–µ .h —Ñ–∞–π–ª—ã –∏ .cpp —Ñ–∞–π–ª—ã.
/// –õ—é–±–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –Ω–µ–∫–æ—Ç–æ—Ä–æ–≥–æ –∫–ª–∞—Å—Å–∞.
/// –ö–ª–∞—Å—Å—ã –∏–º–µ–Ω—É—é—Ç—Å—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º CamelCase, —Ñ—É–Ω–∫—Ü–∏–∏ –∏–º–µ–Ω—É—é—Ç—Å—è
/// —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º snake_case. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∑ enum class
/// –ø—Ä–æ–ø–∏—Å–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏. –ß–ª–µ–Ω—ã –∫–ª–∞—Å—Å–∞ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞ m_ –∑–∞
/// –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –ø–æ–ª–µ–π –Ω–µ–±–æ–ª—å—à–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –∫ –∫–æ—Ç–æ—Ä—ã–º –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è
/// –ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø.

// –Ω–µ –∑–∞–±—ã–≤–∞–µ–º include guarding
#pragma once

#include <vector>
#include <string>
#include <map>
#include <set>
#include <fstream>
#include <utils/surface/triangle.hpp>
#include <utils/surface/face.hpp>
#include <utils/surface/bbox.hpp>
#include <boost/container/static_vector.hpp>
#include <Dense> /// from Eigen library
#include <algorithm>


using boost::container::static_vector;
using Eigen::Vector3d;

/// using –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ —Å–Ω–∞—Ä—É–∂–∏ –∑–∞–ø—Ä–µ—â–µ–Ω!


/// @brief –ò—Å–ø–æ–ª—å–∑—É–µ–º namespace –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤, –ø–æ—Å–∫–æ–ª—å–∫—É —Ç–∏–ø—ã –≤—Ä–æ–¥–µ
/// Vertex –∏ Triangle –º–æ–≥—É—Ç –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞
namespace surf
{
#define equal_d(a, b) abs(a - b) < m_length / 1e8

    /// @brief –ö–ª–∞—Å—Å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏, –≤–µ—Ä—Å–∏—è –¥–ª—è –æ–≤–æ—â–µ–π
    /// –ï—Å—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏ —Ñ—É–Ω–∫—Ü–∏—è is_inside, —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è
    /// –ø–µ—Ä–≤–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∞–º–∏. –í —Ü–µ–ª–æ–º, —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.
    class Surface
    {
    public:

        /// @brief –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞ –∏–∑ stl —Ñ–∞–π–ª–∞
        /// @param filename –ò–º—è stl —Ñ–∞–π–ª–∞
        explicit Surface(const std::string &filename);

        /// @return True, –µ—Å–ª–∏ —Ç–æ—á–∫–∞ v –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏
        bool is_inside(const Vector3d &v) const
        {
            /// –ó–¥–µ—Å—å –ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è. –ë—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç–µ–π—à–µ–µ –ø—Ä–∞–≤–∏–ª–æ
            /// —á–µ—Ç–Ω—ã–π-–Ω–µ—á–µ—Ç–Ω—ã–π (even-odd rule). –ò–∑ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å —Ç–æ—á–∫–∏ –≤—ã–ø—É—Å–∫–∞–µ—Ç—Å—è
            /// –ª—É—á –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏. –ó–∞—Ç–µ–º –æ—Ç—ã—Å–∫–∏–≤–∞—é—Ç—Å—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –ª—É—á–∞
            /// –∏ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏.
//            Vector3d s = m_vertices[rand() % m_vertices.size()].v; // –∫–æ–Ω–µ—Ü –ª—É—á–∞
            Vector3d s = {0.0, 0.0, 0.0};
            for (auto &idx: m_triangles[m_vertices.back().triangles[0]].vertices) // –±–µ—Ä—ë–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Å–º–µ–∂–Ω—ã–π –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–æ—á–∫–µ
                s = s + m_vertices[idx].v;
            s /= 3.0;
            Vector3d l = s - v; // –Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏–π –≤–µ–∫—Ç–æ—Ä –ø—Ä—è–º–æ–π
            s = v + 1.1 * l; // –ø—Ä–æ–¥–ª–∏–ª –ª—É—á
            l = s-v;

            int count = 0; // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π

            auto scalar = [](const Vector3d &a, const Vector3d &b) -> double
            {
                return a.x() * b.x() + a.y() * b.y() + a.z() * b.z();
            };

            for (auto &triangle: m_triangles)
            {
//                –í –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è, –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç –ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π –ª—É—á –ø–ª–æ—Å–∫–æ—Å—Ç—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º–æ–≥–æ
//                —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞: —Ç–æ—á–∫–∏ v –∏ ùëÜ –¥–æ–ª–∂–Ω—ã –ª–µ–∂–∞—Ç—å —Å —Ä–∞–∑–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω –∏–ª–∏ —Å–∫–∞–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
//                –Ω–æ—Ä–º–∞–ª–∏ —Å —Ä–∞–¥–∏—É—Å-–≤–µ–∫—Ç–æ—Ä–∞–º–∏ –æ—Ç –ª—é–±–æ–π –≤–µ—Ä—à–∏–Ω—ã –¥–æ —ç—Ç–∏—Ö —Ç–æ—á–µ–∫ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —Ä–∞–∑–Ω—ã–µ –∑–Ω–∞–∫–∏. –í
//                –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ ‚Äì –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫—É –±–µ–∑ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫.
                Eigen::Vector3d first = m_vertices[triangle.vertices[0]].v; // TODO –ø–æ—á–∏–Ω–∏—Ç—å
                if (scalar(triangle.normal, v - first) * scalar(triangle.normal, s - first) > 0.0)
                    continue;

//                —É—Ä-–µ –ø–ª–æ—Å–∫–æ—Å—Ç–∏: Ax + By + Cz + D = 0
//                —É—Ä-–µ –ø—Ä—è–º–æ–π: x = v.x + m * t, y = v.y + p * t, z = v.y + l * t
//                A = y1 (z2 - z3) + y2 (z3 - z1) + y3 (z1 - z2)
//                B = z1 (x2 - x3) + z2 (x3 - x1) + z3 (x1 - x2)
//                C = x1 (y2 - y3) + x2 (y3 - y1) + x3 (y1 - y2)
//                -D = x1 (y2 z3 - y3 z2) + x2 (y3 z1 - y1 z3) + x3 (y1 z2 - y2 z1)
                std::array<Vector3d, 3> arr;
                for (int i = 0; i < 3; i++)
                    arr[i] = m_vertices[triangle.vertices[i]].v;

                double A, B, C, D;
                A = arr[0].y() * (arr[1].z() - arr[2].z()) + arr[1].y() * (arr[2].z() - arr[0].z()) + arr[2].y() * (arr[0].z() - arr[1].z());
                B = arr[0].z() * (arr[1].x() - arr[2].x()) + arr[1].z() * (arr[2].x() - arr[0].x()) + arr[2].z() * (arr[0].x() - arr[1].x());
                C = arr[0].x() * (arr[1].y() - arr[2].y()) + arr[1].x() * (arr[2].y() - arr[0].y()) + arr[2].x() * (arr[0].y() - arr[1].y());
//                D = -(arr[0].x() * (arr[1].y() * arr[2].z() - arr[1].z() * arr[2].y()) + arr[1].x() * (arr[2].y() * arr[0].z() - arr[2].z() * arr[0].y()) +
//                      arr[2].x() * (arr[0].y() * arr[1].z() - arr[0].z() * arr[1].y()));
                D = -A * arr[0].x() - B * arr[0].y() - C * arr[0].z();

                for (auto &p: arr)
                    if (abs(A * p.x() + B * p.y() + C * p.z() + D) > 1e-5)
                        throw std::runtime_error("wrong plane equation"); // TODO —É–±—Ä–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É, –µ—Å–ª–∏ –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç

                double t = -(D + A * v.x() + B * v.y() + C * v.z()) / (A * l.x() + B * l.y() + C * l.z());
                if (t < 0.0)
                    continue;
                Vector3d x = {v.x() + t * l.x(), v.y() + t * l.y(), v.z() + t * l.z()};
                double area_ = ((x - arr[0]).cross(x - arr[1])).norm() + ((x - arr[0]).cross(x - arr[2])).norm() + ((x - arr[1]).cross(x - arr[2])).norm();
                if (abs(area_ - 2 * triangle.area) > triangle.area * 1e-5)
                    continue; // —Ç–æ—á–∫–∞ –Ω–µ –≤ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–µ
                else
                    count++;
            }

            /// –ï—Å–ª–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –Ω–µ—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ,
            /// –∑–Ω–∞—á–∏—Ç —Ç–æ—á–∫–∞ –ª–µ–∂–∏—Ç –≤–Ω—É—Ç—Ä–∏ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏, –∏–Ω–∞—á–µ -- —Å–Ω–∞—Ä—É–∂–∏.
            /// –ï—Å–ª–∏ —Ç–æ—á–∫–∞ –∏ –ª—É—á –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª—É—á–∞–π–Ω—ã–µ, —Ç–æ –º–æ–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å, —á—Ç–æ
            /// –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏—è –ª—É—á–∞ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü—É —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Ä–∞–≤–Ω–∞ –Ω—É–ª—é
            /// (–≤—Å–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä–æ—á–µ).

            return count % 2 != 0;
        }

        /// –ì–µ—Ç—Ç–µ—Ä—ã —Å–¥–µ–ª–∞–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤, –º–æ–∂–Ω–æ –ø–æ—Ç–æ–º —É–¥–∞–ª–∏—Ç—å
        double getMLength() const;

        const std::vector<Vertex> &getMVertices() const;

        const std::vector<Triangle> &getMTriangles() const;

    private:
        double m_length;                    ///< –•–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        std::vector<Vertex> m_vertices;     ///< –°–ø–∏—Å–æ–∫ –≤–µ—Ä—à–∏–Ω
        std::vector<Triangle> m_triangles;  ///< –°–ø–∏—Å–æ–∫ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤
    };

}