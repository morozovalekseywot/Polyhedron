#include <utils/surface/surface.hpp>


surf::Surface::Surface(const std::string &filename)
{
    /// –í –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –º–∞—Å—Å–∏–≤—ã m_vertices
    /// –∏ m_triangles.

    /// –°—á–∏—Ç—ã–≤–∞–µ–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ –≤ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –º–∞—Å—Å–∏–≤,
    /// –≥–¥–µ –∫–∞–∂–¥—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞–±–æ—Ä–æ–º –∏–∑ —Ç—Ä–µ—Ö
    /// –≤–µ—Ä—à–∏–Ω v1, v2, v3 –∏ –Ω–æ—Ä–º–∞–ª–∏ n, –¥–∞–ª–µ–µ —Ä–∞–±–æ—Ç–∞–µ–º —Å –Ω–∏–º
    std::string path = "../" + filename;
    std::ifstream file(path, std::ios_base::in);
    if (!file.is_open()) // –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –±—ã–ª –æ—Ç–∫—Ä—ã—Ç
    {
        throw std::runtime_error("file isn't open\n");
    }
    std::vector<Face> faces;
    std::string t;
    getline(file, t); // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏–º—è solid
    while (!file.eof())
    {
        file >> t; // facet
        if (t == "endsolid")
            break;
        file >> t; // normal
        Vector3d n;
        file >> n.x() >> n.y() >> n.z();
        getline(file, t); // ignore /n
        getline(file, t); // outer loop
        std::array<Vector3d, 3> verts;
        for (auto &v: verts)
        {
            file >> t; // vertex
            file >> v.x() >> v.y() >> v.z();
        }
        faces.emplace_back(Face(verts, n));
        getline(file, t); // ignore /n
        getline(file, t); // endloop
        getline(file, t); // endfacet
    }
    file.close(); // –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª

    /// –ü–æ —Ö–æ–¥—É —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ –≤—ã—á–∏—Å–ª—è–µ–º m_length. –ë–æ–ª–µ–µ —Ç–æ—á–Ω–æ:
    /// —Å—Ç—Ä–æ–∏–º BoundingBox, –∑–∞—Ç–µ–º m_length —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –¥–ª–∏–Ω—É –¥–∏–∞–≥–æ–Ω–∞–ª–∏.
    /// –í –¥–∞–ª—å–Ω–µ–π—à–µ–º m_length —ç—Ç–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä.
    BBox bbox(faces);
    m_length = bbox.len.norm();
    /// –î–∞–ª–µ–µ —Å–∞–º–∞—è —Å–ª–æ–∂–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è, —É–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –≤–µ—Ä—à–∏–Ω.

    /// –í–∞—Ä–∏–∞–Ω—Ç 2. –ê–¥–µ–∫–≤–∞—Ç–Ω—ã–π, –∑–∞ O(N log(N)).
    /// –í–µ—Ä—à–∏–Ω—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –≤ m_vertices –∏ –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã–π
    /// set, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–∏—à–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∫–æ–º–ø–∞—Ä–∞—Ç–æ—Ä.
    /// –í–º–µ—Å—Ç–æ –ø—Ä–æ—Ö–æ–¥–∞ –ø–æ –≤—Å–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º –≤–µ—Ä—à–∏–Ω–∞–º, –Ω–æ–≤–∞—è –≤–µ—Ä—à–∏–Ω–∞
    /// –ø—Ä–æ—Å—Ç–æ –∏—â–µ—Ç—Å—è –≤ set.
    /// –ö–æ–º–ø–∞—Ä–∞—Ç–æ—Ä —Å–ª–µ–¥—É—é—â–∏–π: –≤–µ—Ä—à–∏–Ω—ã —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω—ã, –µ—Å–ª–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç
    /// —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ eps*m_length, –∏–Ω–∞—á–µ —Å—Ä–∞–≤–Ω–∏–≤–∞—é—Ç—Å—è –∏—Ö –ø—Ä–æ–µ–∫—Ü–∏–∏
    /// –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—É—é –¥–æ–≤–æ–ª—å–Ω–æ —Å–ª—É—á–∞–π–Ω—É—é –æ—Å—å.
    /// –•–æ—Ç—è —É –º–µ–Ω—è –µ—Å—Ç—å —Å–æ–º–Ω–µ–Ω–∏—è, —á—Ç–æ –≤—ã –æ—Å–æ–∑–Ω–∞–µ—Ç–µ, —á—Ç–æ —Ç—É—Ç –Ω–∞–ø–∏—Å–∞–Ω–æ.
    /// –ü—É—Å—Ç—å eps = 1e-8

    auto comp = [this](const Eigen::Vector3d &a, const Eigen::Vector3d &b) -> bool
    {
        if (equal_d(a.x(), b.x()))
        {
            if (equal_d(a.y(), b.y()))
            {
                if (equal_d(a.z(), b.z()))
                    return false;
                else
                    return a.z() < b.z();
            } else
                return a.y() < b.y();
        } else
            return a.x() < b.x();
    };

    std::set<Eigen::Vector3d, decltype(comp)> set_vtx(comp);
    for (auto &face: faces)
    {
        set_vtx.insert(face.vects[0]);
        set_vtx.insert(face.vects[1]);
        set_vtx.insert(face.vects[2]);
    }

    m_vertices.resize(set_vtx.size());
    size_t size = 0;
    for (auto &v: set_vtx)
        m_vertices[size++] = Vertex(v);

    size = 0;
    m_triangles.resize(faces.size());
    for (auto &face: faces)
    {
        // –∏—â–µ–º –∏–Ω–¥–µ–∫—Å—ã –Ω–∞—à–∏—Ö –≤–µ—Ä—à–∏–Ω –≤ –º–∞—Å—Å–∏–≤–µ m_vertices –±–∏–Ω –ø–æ–∏—Å–∫–æ–º (lower_bound)
        auto it1 = std::lower_bound(m_vertices.begin(), m_vertices.end(), face.vects[0], comp);
        auto it2 = std::lower_bound(m_vertices.begin(), m_vertices.end(), face.vects[1], comp);
        auto it3 = std::lower_bound(m_vertices.begin(), m_vertices.end(), face.vects[2], comp);
        size_t idx1 = std::distance(m_vertices.begin(), it1);
        size_t idx2 = std::distance(m_vertices.begin(), it2);
        size_t idx3 = std::distance(m_vertices.begin(), it3);
        m_triangles[size] = Triangle(size, {idx1, idx2, idx3}, face.normal, face.area);
        size++;
    }
    /// –õ–∞–¥–Ω–æ, –ø–æ—Ñ–∏–≥, —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª–∏ –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–Ω–∞—Ç. –¢–µ–ø–µ—Ä—å —É –Ω–∞—Å –µ—Å—Ç—å
    /// m_vertices —Ç–æ–ª—å–∫–æ —Å –ø–æ–ª–æ–∂–µ–Ω–∏—è–º–∏, –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏
    /// m_triangles, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞ –Ω–∏—Ö —Å—Å—ã–ª–∞—é—Ç—Å—è.

    /// –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞–º –≤ m_triangles, —É –Ω–∏—Ö –ø–æ –≤–µ—Ä—à–∏–Ω–∞–º,
    /// –¥–ª—è –≤–µ—Ä—à–∏–Ω –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–º–µ–∂–Ω—ã–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∏.
    for (int i = 0; i < m_triangles.size(); ++i)
    {
        std::array<size_t, 3> verts = m_triangles[i].vertices;
        for (int j = 0; j < 3; j++)
            m_vertices[verts[j]].set_next_triangle(i);
    }

    /// –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞–º –≤ m_triangles, –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∏—Ö
    /// –≤–µ—Ä—à–∏–Ω–∞–º, —É –≤–µ—Ä—à–∏–Ω –≤ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞—Ö –∏—â–µ–º —Å–º–µ–∂–Ω—ã–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∏.
    for (auto &triangle: m_triangles)
    {
        size = 0;
        // —Å–æ–∑–¥–∞—ë–º –≤–µ–∫—Ç–æ—Ä —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤, –∫—É–¥–∞ –±—É–¥–µ–º —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤—Å–µ –∏–Ω–¥–µ–∫—Å—ã —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ —É –≤–µ—Ä—à–∏–Ω
        std::vector<size_t> list_of_triangles(3 * m_vertices[triangle.vertices[0]].max_triangles);
        // –∫–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –∏–Ω–¥–µ–∫—Å—ã —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ –∏–∑ –≤–µ—Ä—à–∏–Ω —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
        for (int idx = 0; idx < 3; idx++)
        {
            size_t verts_idx = triangle.vertices[idx];
            std::copy(m_vertices[verts_idx].triangles.begin(), m_vertices[verts_idx].triangles.end(), list_of_triangles.begin() + size);
            size += m_vertices[verts_idx].triangles.size();
        }

        list_of_triangles.resize(size);
        // —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∏—â–µ–º –∏–Ω–¥–µ–∫—Å—ã –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –¥–≤–∞ —Ä–∞–∑–∞, –∏ –Ω–∞–¥–æ –∏—Å–∫–ª—é—á–∏—Ç—å –Ω–æ–º–µ—Ä —Å–∞–º–æ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ (–≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è 3 —Ä–∞–∑–∞)
        std::sort(list_of_triangles.begin(), list_of_triangles.end());
        size = 0;
        for (int i = 0; i < list_of_triangles.size() - 1; i++)
        {
            if (list_of_triangles[i] == list_of_triangles[i + 1] && list_of_triangles[i] != triangle.index)
                triangle.triangles[size++] = list_of_triangles[i];
        }
    }
}

double surf::Surface::getMLength() const
{
    return m_length;
}

const std::vector<surf::Vertex> &surf::Surface::getMVertices() const
{
    return m_vertices;
}

const std::vector<surf::Triangle> &surf::Surface::getMTriangles() const
{
    return m_triangles;
}

bool surf::Surface::is_inside(const Vector3d &v_) const
{
    /// –ó–¥–µ—Å—å –ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è. –ë—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç–µ–π—à–µ–µ –ø—Ä–∞–≤–∏–ª–æ
    /// —á–µ—Ç–Ω—ã–π-–Ω–µ—á–µ—Ç–Ω—ã–π (even-odd rule). –ò–∑ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å —Ç–æ—á–∫–∏ –≤—ã–ø—É—Å–∫–∞–µ—Ç—Å—è
    /// –ª—É—á –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏. –ó–∞—Ç–µ–º –æ—Ç—ã—Å–∫–∏–≤–∞—é—Ç—Å—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –ª—É—á–∞
    /// –∏ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏.
    Vector3d v = v_;
    Vector3d s = {0.0, 0.0, 0.0};
    for (auto &idx: m_triangles[m_vertices.back().triangles[0]].vertices) // –±–µ—Ä—ë–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Å–º–µ–∂–Ω—ã–π –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–æ—á–∫–µ
        s = s + m_vertices[idx].v;
    s /= 3.0;
    s = v + 100 * (s - v); // –ø—Ä–æ–¥–ª–∏–ª –ª—É—á
    Vector3d l = s - v; // –Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏–π –≤–µ–∫—Ç–æ—Ä –ø—Ä—è–º–æ–π

    int count = 0; // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π

    auto scalar = [](const Vector3d &a, const Vector3d &b) -> double
    {
        return a.x() * b.x() + a.y() * b.y() + a.z() * b.z();
    };

    for (auto &triangle: m_triangles)
    {
        // –í –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è, –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç –ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π –ª—É—á –ø–ª–æ—Å–∫–æ—Å—Ç—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º–æ–≥–æ
        // —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞: —Ç–æ—á–∫–∏ v –∏ ùëÜ –¥–æ–ª–∂–Ω—ã –ª–µ–∂–∞—Ç—å —Å —Ä–∞–∑–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω –∏–ª–∏ —Å–∫–∞–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        // –Ω–æ—Ä–º–∞–ª–∏ —Å —Ä–∞–¥–∏—É—Å-–≤–µ–∫—Ç–æ—Ä–∞–º–∏ –æ—Ç –ª—é–±–æ–π –≤–µ—Ä—à–∏–Ω—ã –¥–æ —ç—Ç–∏—Ö —Ç–æ—á–µ–∫ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —Ä–∞–∑–Ω—ã–µ –∑–Ω–∞–∫–∏. –í
        // –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ ‚Äì –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫—É –±–µ–∑ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫.
        Eigen::Vector3d first = m_vertices[triangle.vertices[0]].v;
        if (scalar(triangle.normal, v - first) * scalar(triangle.normal, s - first) > 0.0)
            continue;

        if (abs(scalar(triangle.normal, first - v)) / (first - v).norm() < 1e-5) // —Ç–æ—á–∫–∞ –ª–µ–∂–∏—Ç –≤ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
        {
            std::array<Vector3d, 3> arr;
            for (int i = 0; i < 3; i++)
                arr[i] = m_vertices[triangle.vertices[i]].v;

            double area_ = ((v - arr[0]).cross(v - arr[1])).norm() + ((v - arr[0]).cross(v - arr[2])).norm() + ((v - arr[1]).cross(v - arr[2])).norm();
            return (abs(area_ - 2 * triangle.area) < triangle.area * 1e-5);
        }
        // —É—Ä-–µ –ø–ª–æ—Å–∫–æ—Å—Ç–∏: Ax + By + Cz + D = 0
        // —É—Ä-–µ –ø—Ä—è–º–æ–π: x = v.x + m * t, y = v.y + p * t, z = v.y + l * t
        // A = y1 (z2 - z3) + y2 (z3 - z1) + y3 (z1 - z2)
        // B = z1 (x2 - x3) + z2 (x3 - x1) + z3 (x1 - x2)
        // C = x1 (y2 - y3) + x2 (y3 - y1) + x3 (y1 - y2)
        // -D = x1 (y2 z3 - y3 z2) + x2 (y3 z1 - y1 z3) + x3 (y1 z2 - y2 z1)
        std::array<Vector3d, 3> arr;
        for (int i = 0; i < 3; i++)
            arr[i] = m_vertices[triangle.vertices[i]].v;

        double A, B, C, D;
        A = arr[0].y() * (arr[1].z() - arr[2].z()) + arr[1].y() * (arr[2].z() - arr[0].z()) + arr[2].y() * (arr[0].z() - arr[1].z());
        B = arr[0].z() * (arr[1].x() - arr[2].x()) + arr[1].z() * (arr[2].x() - arr[0].x()) + arr[2].z() * (arr[0].x() - arr[1].x());
        C = arr[0].x() * (arr[1].y() - arr[2].y()) + arr[1].x() * (arr[2].y() - arr[0].y()) + arr[2].x() * (arr[0].y() - arr[1].y());
//                D = -(arr[0].x() * (arr[1].y() * arr[2].z() - arr[1].z() * arr[2].y()) + arr[1].x() * (arr[2].y() * arr[0].z() - arr[2].z() * arr[0].y()) +
//                      arr[2].x() * (arr[0].y() * arr[1].z() - arr[0].z() * arr[1].y()));
        D = -A * arr[0].x() - B * arr[0].y() - C * arr[0].z();

        double t = -(D + A * v.x() + B * v.y() + C * v.z()) / (A * l.x() + B * l.y() + C * l.z());
        if (t < 0.0)
            continue;
        Vector3d x = {v.x() + t * l.x(), v.y() + t * l.y(), v.z() + t * l.z()};
        std::array<double, 3> arr_area = {((x - arr[0]).cross(x - arr[1])).norm(), ((x - arr[0]).cross(x - arr[2])).norm(),
                                          ((x - arr[1]).cross(x - arr[2])).norm()};
        //double area_ = ((x - arr[0]).cross(x - arr[1])).norm() + ((x - arr[0]).cross(x - arr[2])).norm() + ((x - arr[1]).cross(x - arr[2])).norm();
        if (abs(arr_area[0] + arr_area[1] + arr_area[2] - 2 * triangle.area) > triangle.area * 1e-5)
            continue; // —Ç–æ—á–∫–∞ –Ω–µ –≤ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–µ
        else
        {
            for (auto &area: arr_area)
            {
                if (area < triangle.area * 1e-5)
                {
                    v = (250 * v + arr[0] + arr[1] + arr[2]) / 251;
                    break;
                }
            }
            count++;
        }
    }

    /// –ï—Å–ª–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –Ω–µ—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ,
    /// –∑–Ω–∞—á–∏—Ç —Ç–æ—á–∫–∞ –ª–µ–∂–∏—Ç –≤–Ω—É—Ç—Ä–∏ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏, –∏–Ω–∞—á–µ -- —Å–Ω–∞—Ä—É–∂–∏.
    /// –ï—Å–ª–∏ —Ç–æ—á–∫–∞ –∏ –ª—É—á –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª—É—á–∞–π–Ω—ã–µ, —Ç–æ –º–æ–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å, —á—Ç–æ
    /// –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏—è –ª—É—á–∞ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü—É —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Ä–∞–≤–Ω–∞ –Ω—É–ª—é
    /// (–≤—Å–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä–æ—á–µ).

    return count % 2 != 0;
}
